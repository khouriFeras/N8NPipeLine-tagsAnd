{
  "name": "Simple Tagging Test",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Simple test data for tagging\nreturn [{\n  json: {\n    products_data: [\n      {\n        \"Title\": \"Power Drill Set\",\n        \"Body (HTML)\": \"Professional cordless drill with 2 batteries and charger\",\n        \"Product Type\": \"Power Tools\"\n      },\n      {\n        \"Title\": \"Steel Hammer 16oz\",\n        \"Body (HTML)\": \"Heavy-duty steel claw hammer for construction work\",\n        \"Product Type\": \"Hand Tools\"\n      }\n    ]\n  }\n}];"
      },
      "id": "test-data",
      "name": "Test Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://jafartrans-tags.up.railway.app/api/tag-products-simple",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "tag-products",
      "name": "Tag Products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process the tagging results (handle text response with NaN values)\nconst responseText = $input.first().json;\n\nconsole.log('Raw Response:', responseText);\n\n// Clean the JSON by replacing NaN values\nconst cleanedJson = responseText\n  .replace(/:\\s*NaN/g, ': null')  // Replace : NaN with : null\n  .replace(/:\\s*Infinity/g, ': null')  // Replace : Infinity with : null\n  .replace(/:\\s*-Infinity/g, ': null'); // Replace : -Infinity with : null\n\nconsole.log('Cleaned JSON:', cleanedJson);\n\nlet response;\ntry {\n  response = JSON.parse(cleanedJson);\n} catch (error) {\n  console.error('JSON Parse Error:', error);\n  return {\n    json: {\n      success: false,\n      error: 'Failed to parse API response: ' + error.message,\n      raw_response: responseText\n    }\n  };\n}\n\nconsole.log('Parsed Response:', JSON.stringify(response, null, 2));\n\nif (response.status === 'success' && response.data) {\n  return {\n    json: {\n      success: true,\n      message: 'Products tagged successfully!',\n      total_products: response.stats?.total_products || 0,\n      tagged_products: response.stats?.tagged_products || 0,\n      results: response.data.map(product => ({\n        title: product.Title,\n        tags: product.tags,\n        confidence: product.confidence\n      }))\n    }\n  };\n} else {\n  return {\n    json: {\n      success: false,\n      error: response.message || 'Tagging failed',\n      raw_response: response\n    }\n  };\n}"
      },
      "id": "process-results",
      "name": "Process Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Test Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Data": {
      "main": [
        [
          {
            "node": "Tag Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tag Products": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  }
}
